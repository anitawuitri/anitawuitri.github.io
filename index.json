[{"content":"","date":"23 September 2023","permalink":"/tags/mojo/","section":"Tags","summary":"","title":"mojo"},{"content":" New Programming Language (Mojo) trial Why Try Mojo 為何想嘗試一下Mojo # Because saw this article Mojo Language: The New Programming Language for AI 一直在尋求除了Python以外其他的AI開發用程式語言，Python 的performance 極差造成在邊緣運算的開發瓶頸，因此在嘗試的使用其他跟硬體整合度更好的高階程式語言 (不需要做Cross compiler 額外的編譯) e.g. GO, RUST.\nFeature Python Go Programming language General-purpose General-purpose Type system Dynamic Static Concurrency Yes Yes Garbage collection Yes Yes Memory safety Yes Yes Performance Interpreted, slower Compiled, faster Simplicity Easier to learn and use More complex to learn, but simpler syntax Community Large and active Smaller but growing Popular use cases Web development, data science, machine learning Systems programming, cloud computing, distributed systems Just like to learn new programming languages 💖💕🫶 Mojo Installation (VS Code + WSL) # installation reference\nInstall VS Code, the WSL extension. (also see Python Dummy Day 1) Install Ubuntu 22.04 for WSL and open it. In the Ubuntu terminal, install the Modular CLI: curl https://get.modular.com | \\ MODULAR_AUTH=mut_0056b5ebbaab4074af12927c8d9af244 \\ sh - Install the Mojo SDK: modular install mojo Open VS Code, connect to WSL, and install VS Code Mojo Extension. Check Mojo in shell initialization ( ~/.zshrc as an example)\nexport PATH=$PATH:/usr/local/go/bin export MODULAR_HOME=\u0026#34;$HOME/.modular\u0026#34; export PATH=\u0026#34;$MODULAR_HOME/pkg/packages.modular.com_mojo/bin:$PATH\u0026#34; if not in rc script, run commands:\necho \u0026#39;export MODULAR_HOME=\u0026#34;$HOME/.modular\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;export PATH=\u0026#34;$MODULAR_HOME/pkg/packages.modular.com_mojo/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc First Mojo Program : Hello World! # hello world reference\nRun code in the REPL(Read-eval-print loop) # Run mojo execution environment ~/work/mojo » mojo Welcome to Mojo! 🔥 Expressions are delimited by a blank line. Type `:mojo help` for further assistance. 1\u0026gt; print hello world 1\u0026gt; print(\u0026#34;hello world\u0026#34;) ### not allow backspace 2. ### press enter here hello world 2\u0026gt; Build and run Mojo source files # create a hello work folder ~/work/mojo » mkdir hello create a hello.mojo file ~/work/mojo/hello » code hello.mojo write hello world mojo codes in hello.mojo file fn main(): print(\u0026#34;Hello, world!\u0026#34;) run hello.mojo ~/work/mojo/hello » mojo hello.mojo Hello, world! build hello world executable binary ~/work/mojo/hello » mojo build hello.mojo check generated executable binary file ~/work/mojo/hello » ls hello hello.mojo run hello ~/work/mojo/hello » ./hello Hello, world! 不負責之試用心得 # binary size : 1.7 MB，比之前用GO build做出來還小一些，但是差距不大。 ~/work/mojo/hello » ls -alh hello -rwxr-xr-x 1 anitawu anitawu 1.7M Sep 23 13:51 hello 稍微看一下它包了什麼進去 ~/work/mojo/hello » hexdump -C hello | more Link GNU 一堆linux system call link glibc 不同版本，為跨平台。 一堆llvm 期待能整合到各家GPU/APU/NPU whatever Unit。應該是跟RUST 不同走向。語法其實跟python 比較類似，學起來不會太久。下次來試試其他的example (看看有什麼演算法或是training相關的)。\nReference\nMojo official website Mojo Documents ","date":"23 September 2023","permalink":"/blogs/mojo/","section":"Blogs","summary":"New Programming Language (Mojo) trial Why Try Mojo 為何想嘗試一下Mojo # Because saw this article Mojo Language: The New Programming Language for AI 一直在尋求除了Python以外其他的AI開發用程式語言，Python 的performance 極差造成在邊緣運算的開發瓶頸，因此在嘗試的使用其他跟硬體整合度更好的高階程式語言 (不需要做Cross compiler 額外的編譯) e.","title":"Mojo"},{"content":"","date":"23 September 2023","permalink":"/tags/new-tech/","section":"Tags","summary":"","title":"new tech"},{"content":"","date":"23 September 2023","permalink":"/tags/programming-languages/","section":"Tags","summary":"","title":"programming languages"},{"content":"","date":"23 September 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"23 September 2023","permalink":"/","section":"Welcome to Anita Wu's Blog!","summary":"","title":"Welcome to Anita Wu's Blog!"},{"content":"","date":"8 September 2023","permalink":"/tags/dummy/","section":"Tags","summary":"","title":"dummy"},{"content":"","date":"8 September 2023","permalink":"/tags/python/","section":"Tags","summary":"","title":"python"},{"content":"","date":"8 September 2023","permalink":"/series/python-dummy-10-days/","section":"Series","summary":"","title":"Python Dummy 10 Days"},{"content":" 如何使用 WSL 在 Windows 上安裝 Linux 如何使用 WSL 在 Windows 上安裝 Linux # 安裝 WSL # Windows 搜尋 Powershell # 開啟powershell 安裝WSL # wsl --install 檢查安裝版本 # wsl -l -v Result:\nPS C:\\Users\\B20408\u0026gt; wsl -l -v NAME STATE VERSION * Ubuntu Running 2 使用 VS Code + WSL 開發 Python # 下載並安裝VS Code # VS Code 開發畫面 連結WSL # 有幾種方式連結WSL\n點右下角連結 點選上方Help 使用快速鍵 Press CTRL+Shift+P 開啟指令集 使用VS Code + WSL : Python 開發環境 # 確認Python 版本 Python Hello World 範例\n建立 hello.py ### 在terminal 使用 code 指令，可直接使用VS Code 開啟新檔案。 ~/work/python/tutor » code hello.py 使用 print 語法，輸出 Hello World 字串。 print(\u0026#34;hello world\u0026#34;) 執行 hello.py 在 terminal 使用指令執行 ~/work/python/tutor » python hello.py hello world 使用VS Code GUI 介面 安裝 Virtual Environment # 維持乾淨的Python環境與乾淨的本機環境。\n開發環境獨立，所依賴套件清楚。 升級不會影響其他環境原有的套件版本。 防止系統大雜燴所造成的管理困難以及產生可能的衝突。 安裝 Virtualenv 與 Virtualenvwrapper\npip3 install virtualenv virtualenvwrapper 初始化 Virtualenv 與 Virtualenvwrapper in ~/.bashrc or ~/.zshrc\nexport WORKON_HOME=$HOME/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=\u0026#39; -p /usr/bin/python3 \u0026#39; export PROJECT_HOME=$HOME/work/python source /usr/local/bin/virtualenvwrapper.sh 指令說明\n## 查詢環境 lsvirtualenv ## 建立環境 mkvirtualenv (環境名稱) ## 複製環境 cpvirtualenv (原有環境) (新環境名稱) ## 刪除環境 rmvirtualenv (環境名稱) ## 使用環境 workon (環境名稱) ## 退出環境 deactivate Reference\n如何使用 WSL 在 Windows 上安裝 Linux VS Code Website 拯救骯髒環境大作戰 ","date":"8 September 2023","permalink":"/docs/python/day1/","section":"Documents","summary":"如何使用 WSL 在 Windows 上安裝 Linux 如何使用 WSL 在 Windows 上安裝 Linux # 安裝 WSL # Windows 搜尋 Powershell # 開啟powershell 安裝WSL # wsl --install 檢查安裝版本 # wsl -l -v Result:","title":"Python Dummy Day 1 : 開發環境"},{"content":"","date":"8 September 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"8 September 2023","permalink":"/tags/training/","section":"Tags","summary":"","title":"training"},{"content":" About Me Skills : # C/C++ Java embedded linux RTOS High level languages: python, go, node, lua. Web development: vue, django, javascript. Other languages: SQL, YAML Frameworks: Docker Experiences # ITRI Deputy Project Manager Now AI Team leader and AI Project Leader. XSquare DevOps and AI team leader 2 years 1. 5G AIoT new technologies, ecosystem (AI, IOT, and Security), and open development framework build-up 2. IT Infrastructure build up/maintain/re-design 3. CI/CD and DevOps flow build up WNC Principal Software Engineer (Embedded Engineer) 9 years Project Development: - New technical study and demo sample development (Smart Meter and Roadside UNIT) - WiFi mmWave 60G AP docker development (Embedded Linux) - BLE indoor location tracking system development (RTOS and Embedded Linux) - Automotive CPU/WiFi-BT modules Software Testing System Design/Development. Networking Product Development: - Protocols development of Router relative product (UPnP, HTTP and others derived from HTTP) - Porting GPL open sources application on linux embedded system. - Create ourselves middleware architecture on linux relative system. (System configuration, IPC, Makefile chain) Security and DevOps: - Develop CVEs scan tool using python and SQL and design CVEs static analyzer on CI/CD flow - Software Development Processes Expert (Using JIRA to implement A-SPICE and Agile SW DEVOPS) AUO Senior Software Engineer 1 year TV OSD development. MYCOM Senior Jave Developer 1.5 years Java parser programming on various data type (ASCII, XML, ASN1, Binary). Education # NYU Tandon School of Engineering Master Degree of Telecommunications Engineering San Francisco State University Master Degree of Computer Science ","date":"7 September 2023","permalink":"/about/","section":"About Me","summary":"About Me Skills : # C/C++ Java embedded linux RTOS High level languages: python, go, node, lua.","title":"About Me"},{"content":" Anita Wu\u0026rsquo;s learn note and training material ","date":"7 September 2023","permalink":"/blogs/","section":"Blogs","summary":" Anita Wu\u0026rsquo;s learn note and training material ","title":"Blogs"},{"content":" Anita Wu\u0026rsquo;s training material and other technologies learning. # ","date":"7 September 2023","permalink":"/docs/","section":"Documents","summary":"Anita Wu\u0026rsquo;s training material and other technologies learning.","title":"Documents"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]